type EntityType = 
 variant {
   BridgeEntity;
   Location;
   Person;
   Webasset;
 };
type EntitySettings = record {};
type BridgeType = variant {OwnerCreated;};
type BridgeState = 
 variant {
   Confirmed;
   Pending;
   Rejected;
 };
type BridgeEntity = 
 record {
   bridgeType: BridgeType;
   creationTimestamp: nat64;
   creator: principal;
   description: opt text;
   entitySpecificFields: opt text;
   entityType: EntityType;
   externalId: opt text;
   fromEntityId: text;
   internalId: text;
   keywords: opt vec text;
   listOfEntitySpecificFieldKeys: vec text;
   name: opt text;
   owner: principal;
   settings: EntitySettings;
   state: BridgeState;
   toEntityId: text;
 };
service : {
  get_bridge: (text) -> (opt BridgeEntity);
  get_bridge_ids_by_entity_id: (text, bool, bool, bool) -> (vec text);
  get_bridges_by_entity_id: (text, bool, bool, bool) -> (vec BridgeEntity);
}

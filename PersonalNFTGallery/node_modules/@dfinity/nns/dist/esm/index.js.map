{
  "version": 3,
  "sources": ["../../src/utils/neurons.utils.ts"],
  "sourcesContent": ["import type {\n  Ballot,\n  BallotInfo,\n  NeuronInfo,\n  ProposalId,\n  ProposalInfo,\n  Vote,\n} from \"../types/governance_converters\";\n\nconst voteForProposal = ({\n  recentBallots,\n  proposalId,\n}: {\n  recentBallots: BallotInfo[];\n  proposalId: ProposalId | undefined;\n}): Vote | undefined => {\n  if (!proposalId) {\n    return undefined;\n  }\n\n  const ballot: BallotInfo | undefined = recentBallots.find(\n    ({ proposalId: id }: BallotInfo) => id === proposalId\n  );\n  return ballot?.vote;\n};\n\nexport const ineligibleNeurons = ({\n  neurons,\n  proposal,\n}: {\n  neurons: NeuronInfo[];\n  proposal: ProposalInfo;\n}): NeuronInfo[] => {\n  const { ballots, proposalTimestampSeconds } = proposal;\n\n  return neurons.filter(({ createdTimestampSeconds, neuronId }: NeuronInfo) => {\n    const createdSinceProposal: boolean =\n      createdTimestampSeconds > proposalTimestampSeconds;\n\n    const dissolveTooShort: boolean =\n      ballots.find(\n        ({ neuronId: ballotNeuronId }: Ballot) => ballotNeuronId === neuronId\n      ) === undefined;\n\n    return createdSinceProposal || dissolveTooShort;\n  });\n};\n\n/**\n * Neurons that can vote for the proposal (not voted, with voting power)\n */\nexport const votableNeurons = ({\n  neurons,\n  proposal,\n}: {\n  neurons: NeuronInfo[];\n  proposal: ProposalInfo;\n}): NeuronInfo[] => {\n  const { id: proposalId } = proposal;\n\n  return neurons.filter(\n    ({ recentBallots, neuronId }: NeuronInfo) =>\n      voteForProposal({ recentBallots, proposalId }) === undefined &&\n      ineligibleNeurons({ neurons, proposal }).find(\n        ({ neuronId: ineligibleNeuronId }: NeuronInfo) =>\n          ineligibleNeuronId === neuronId\n      ) === undefined\n  );\n};\n\nexport const votedNeurons = ({\n  neurons,\n  proposal,\n}: {\n  neurons: NeuronInfo[];\n  proposal: ProposalInfo;\n}): NeuronInfo[] => {\n  const { id: proposalId } = proposal;\n\n  return neurons.filter(\n    ({ recentBallots }: NeuronInfo) =>\n      voteForProposal({ recentBallots, proposalId }) !== undefined\n  );\n};\n"],
  "mappings": "+hBASA,GAAM,GAAkB,CAAC,CACvB,gBACA,gBAKK,EAOE,AAHgC,EAAc,KACnD,CAAC,CAAE,WAAY,KAAqB,IAAO,CAC7C,GACe,KANb,OASS,EAAoB,CAAC,CAChC,UACA,cAIkB,CAClB,GAAM,CAAE,UAAS,4BAA6B,EAE9C,MAAO,GAAQ,OAAO,CAAC,CAAE,0BAAyB,cAA2B,CAC3E,GAAM,GACJ,EAA0B,EAEtB,EACJ,EAAQ,KACN,CAAC,CAAE,SAAU,KAA6B,IAAmB,CAC/D,IAAM,OAER,MAAO,IAAwB,CACjC,CAAC,CACH,EAKa,EAAiB,CAAC,CAC7B,UACA,cAIkB,CAClB,GAAM,CAAE,GAAI,GAAe,EAE3B,MAAO,GAAQ,OACb,CAAC,CAAE,gBAAe,cAChB,EAAgB,CAAE,gBAAe,YAAW,CAAC,IAAM,QACnD,EAAkB,CAAE,UAAS,UAAS,CAAC,EAAE,KACvC,CAAC,CAAE,SAAU,KACX,IAAuB,CAC3B,IAAM,MACV,CACF,EAEa,EAAe,CAAC,CAC3B,UACA,cAIkB,CAClB,GAAM,CAAE,GAAI,GAAe,EAE3B,MAAO,GAAQ,OACb,CAAC,CAAE,mBACD,EAAgB,CAAE,gBAAe,YAAW,CAAC,IAAM,MACvD,CACF",
  "names": []
}

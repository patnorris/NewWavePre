{
  "version": 3,
  "sources": ["../../src/icp.ts", "../../src/constants/constants.ts", "../../src/types/icp.ts"],
  "sourcesContent": ["import { ICPTs } from \"../proto/ledger_pb\";\nimport { E8S_PER_ICP } from \"./constants/constants\";\nimport { FromICPStringError } from \"./types/icp\";\n\nexport class ICP {\n  private constructor(private e8s: bigint) {}\n\n  public static fromE8s(amount: bigint): ICP {\n    return new ICP(amount);\n  }\n\n  /**\n   * Initialize from a string. Accepted formats:\n   *\n   * 1234567.8901\n   * 1'234'567.8901\n   * 1,234,567.8901\n   */\n  public static fromString(amount: string): ICP | FromICPStringError {\n    // Remove all instances of \",\" and \"'\".\n    amount = amount.trim().replace(/[,']/g, \"\");\n\n    // Verify that the string is of the format 1234.5678\n    const regexMatch = amount.match(/\\d*(\\.\\d*)?/);\n    if (!regexMatch || regexMatch[0] !== amount) {\n      return FromICPStringError.INVALID_FORMAT;\n    }\n\n    const [integral, fractional] = amount.split(\".\");\n\n    let e8s = BigInt(0);\n\n    if (integral) {\n      try {\n        e8s += BigInt(integral) * E8S_PER_ICP;\n      } catch {\n        return FromICPStringError.INVALID_FORMAT;\n      }\n    }\n\n    if (fractional) {\n      if (fractional.length > 8) {\n        return FromICPStringError.FRACTIONAL_MORE_THAN_8_DECIMALS;\n      }\n      try {\n        e8s += BigInt(fractional.padEnd(8, \"0\"));\n      } catch {\n        return FromICPStringError.INVALID_FORMAT;\n      }\n    }\n\n    return new ICP(e8s);\n  }\n\n  public toE8s(): bigint {\n    return this.e8s;\n  }\n\n  public toProto(): ICPTs {\n    const proto = new ICPTs();\n    proto.setE8s(this.e8s.toString());\n    return proto;\n  }\n}\n", "export const SUB_ACCOUNT_BYTE_LENGTH = 32;\nexport const CREATE_CANISTER_MEMO = BigInt(0x41455243); // CREA,\nexport const TOP_UP_CANISTER_MEMO = BigInt(0x50555054); // TPUP\n\nexport const TRANSACTION_FEE = BigInt(10_000);\n\n// Note:  Canister IDs are not constant, so are not provided here.\n//        The same applies to HOST.\nexport const E8S_PER_ICP = BigInt(100000000);\n", "export enum FromICPStringError {\n  FRACTIONAL_MORE_THAN_8_DECIMALS,\n  INVALID_FORMAT,\n}\n"],
  "mappings": "gFAAA,MAAsB,OCCf,GAAM,GAAuB,OAAO,UAAU,EACxC,EAAuB,OAAO,UAAU,EAExC,EAAkB,OAAO,GAAM,EAI/B,EAAc,OAAO,GAAS,ECRpC,GAAK,GAAL,CAAK,GACV,0EACA,uCAFU,WFIL,WAAU,CACP,YAAoB,EAAa,CAAb,UAAc,OAE5B,SAAQ,EAAqB,CACzC,MAAO,IAAI,GAAI,CAAM,CACvB,OASc,YAAW,EAA0C,CAEjE,EAAS,EAAO,KAAK,EAAE,QAAQ,QAAS,EAAE,EAG1C,GAAM,GAAa,EAAO,MAAM,aAAa,EAC7C,GAAI,CAAC,GAAc,EAAW,KAAO,EACnC,MAAO,GAGT,GAAM,CAAC,EAAU,GAAc,EAAO,MAAM,GAAG,EAE3C,EAAM,OAAO,CAAC,EAElB,GAAI,EACF,GAAI,CACF,GAAO,OAAO,CAAQ,EAAI,CAC5B,MAAE,CACA,MAAO,EACT,CAGF,GAAI,EAAY,CACd,GAAI,EAAW,OAAS,EACtB,MAAO,GAET,GAAI,CACF,GAAO,OAAO,EAAW,OAAO,EAAG,GAAG,CAAC,CACzC,MAAE,CACA,MAAO,EACT,CACF,CAEA,MAAO,IAAI,GAAI,CAAG,CACpB,CAEO,OAAgB,CACrB,MAAO,MAAK,GACd,CAEO,SAAiB,CACtB,GAAM,GAAQ,GAAI,SAClB,SAAM,OAAO,KAAK,IAAI,SAAS,CAAC,EACzB,CACT,CACF",
  "names": []
}

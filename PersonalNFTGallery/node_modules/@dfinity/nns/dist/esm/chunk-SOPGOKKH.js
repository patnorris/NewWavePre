import{c as i,g as a,h as s}from"./chunk-EDMSX7GK.js";var u=({IDL:e})=>{let r=e.Record({id:e.Nat64}),t=e.Variant({Ok:e.Vec(r),Err:e.Text}),n=e.Variant({Ok:e.Null,Err:e.Text}),c=e.Record({error:e.Opt(e.Text),timestamp_seconds:e.Nat64,neuron_id:e.Opt(r)}),d=e.Record({authenticated_principal_id:e.Opt(e.Principal),successfully_transferred_neurons:e.Vec(c),is_whitelisted_for_forwarding:e.Bool,has_donated:e.Bool,failed_transferred_neurons:e.Vec(c),neuron_ids:e.Vec(r),has_claimed:e.Bool,has_forwarded:e.Bool,icpts:e.Nat32}),l=e.Variant({Ok:d,Err:e.Text});return e.Service({balance:e.Func([e.Text],[e.Nat32],["query"]),claim_neurons:e.Func([e.Text],[t],[]),donate_account:e.Func([e.Text],[n],[]),forward_whitelisted_unclaimed_accounts:e.Func([e.Null],[n],[]),get_account:e.Func([e.Text],[l],["query"]),len:e.Func([],[e.Nat16],["query"]),total:e.Func([],[e.Nat32],["query"])})};var o=class{constructor(r){this.service=r}static create(r={}){let t=r.agent??s(),n=r.canisterId??a,c=r.serviceOverride??i.createActor(u,{agent:t,canisterId:n});return new o(c)}claimNeurons=async({hexPubKey:r})=>{let t=await this.service.claim_neurons(r);if("Ok"in t)return t.Ok.map(n=>n.id);throw new Error(t.Err)}};export{o as a};
//# sourceMappingURL=chunk-SOPGOKKH.js.map

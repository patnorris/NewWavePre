{
  "version": 3,
  "sources": ["../../candid/ledger.certified.idl.js", "../../candid/ledger.idl.js", "../../src/ledger.ts", "../../src/canisters/ledger/ledger.request.converts.ts", "../../src/errors/ledger.errors.ts"],
  "sourcesContent": ["/* Do not edit.  Compiled with ./scripts/compile-idl-js from candid/ledger.did */\nexport const idlFactory = ({ IDL }) => {\n  const BlockIndex = IDL.Nat64;\n  const GetBlocksArgs = IDL.Record({\n    'start' : BlockIndex,\n    'length' : IDL.Nat64,\n  });\n  const Memo = IDL.Nat64;\n  const AccountIdentifier = IDL.Vec(IDL.Nat8);\n  const Tokens = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const Operation = IDL.Variant({\n    'Burn' : IDL.Record({ 'from' : AccountIdentifier, 'amount' : Tokens }),\n    'Mint' : IDL.Record({ 'to' : AccountIdentifier, 'amount' : Tokens }),\n    'Transfer' : IDL.Record({\n      'to' : AccountIdentifier,\n      'fee' : Tokens,\n      'from' : AccountIdentifier,\n      'amount' : Tokens,\n    }),\n  });\n  const TimeStamp = IDL.Record({ 'timestamp_nanos' : IDL.Nat64 });\n  const Transaction = IDL.Record({\n    'memo' : Memo,\n    'operation' : IDL.Opt(Operation),\n    'created_at_time' : TimeStamp,\n  });\n  const Block = IDL.Record({\n    'transaction' : Transaction,\n    'timestamp' : TimeStamp,\n    'parent_hash' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n  });\n  const BlockRange = IDL.Record({ 'blocks' : IDL.Vec(Block) });\n  const QueryArchiveError = IDL.Variant({\n    'BadFirstBlockIndex' : IDL.Record({\n      'requested_index' : BlockIndex,\n      'first_valid_index' : BlockIndex,\n    }),\n    'Other' : IDL.Record({\n      'error_message' : IDL.Text,\n      'error_code' : IDL.Nat64,\n    }),\n  });\n  const QueryArchiveResult = IDL.Variant({\n    'Ok' : BlockRange,\n    'Err' : QueryArchiveError,\n  });\n  const QueryArchiveFn = IDL.Func([GetBlocksArgs], [QueryArchiveResult], []);\n  const QueryBlocksResponse = IDL.Record({\n    'certificate' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'blocks' : IDL.Vec(Block),\n    'chain_length' : IDL.Nat64,\n    'first_block_index' : BlockIndex,\n    'archived_blocks' : IDL.Vec(\n      IDL.Record({\n        'callback' : QueryArchiveFn,\n        'start' : BlockIndex,\n        'length' : IDL.Nat64,\n      })\n    ),\n  });\n  const AccountBalanceArgs = IDL.Record({ 'account' : AccountIdentifier });\n  const Archive = IDL.Record({ 'canister_id' : IDL.Principal });\n  const Archives = IDL.Record({ 'archives' : IDL.Vec(Archive) });\n  const SubAccount = IDL.Vec(IDL.Nat8);\n  const TransferArgs = IDL.Record({\n    'to' : AccountIdentifier,\n    'fee' : Tokens,\n    'memo' : Memo,\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(TimeStamp),\n    'amount' : Tokens,\n  });\n  const TransferError = IDL.Variant({\n    'TxTooOld' : IDL.Record({ 'allowed_window_nanos' : IDL.Nat64 }),\n    'BadFee' : IDL.Record({ 'expected_fee' : Tokens }),\n    'TxDuplicate' : IDL.Record({ 'duplicate_of' : BlockIndex }),\n    'TxCreatedInFuture' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : Tokens }),\n  });\n  const TransferResult = IDL.Variant({\n    'Ok' : BlockIndex,\n    'Err' : TransferError,\n  });\n  const TransferFeeArg = IDL.Record({});\n  const TransferFee = IDL.Record({ 'transfer_fee' : Tokens });\n  return IDL.Service({\n    '_blocks' : IDL.Func([GetBlocksArgs], [QueryBlocksResponse], []),\n    'account_balance' : IDL.Func([AccountBalanceArgs], [Tokens], []),\n    'archives' : IDL.Func([], [Archives], []),\n    'decimals' : IDL.Func([], [IDL.Record({ 'decimals' : IDL.Nat32 })], []),\n    'name' : IDL.Func([], [IDL.Record({ 'name' : IDL.Text })], []),\n    'symbol' : IDL.Func([], [IDL.Record({ 'symbol' : IDL.Text })], []),\n    'transfer' : IDL.Func([TransferArgs], [TransferResult], []),\n    'transfer_fee' : IDL.Func([TransferFeeArg], [TransferFee], []),\n  });\n};\nexport const init = ({ IDL }) => { return []; };\n", "/* Do not edit.  Compiled with ./scripts/compile-idl-js from candid/ledger.did */\nexport const idlFactory = ({ IDL }) => {\n  const AccountIdentifier = IDL.Vec(IDL.Nat8);\n  const AccountBalanceArgs = IDL.Record({ 'account' : AccountIdentifier });\n  const Tokens = IDL.Record({ 'e8s' : IDL.Nat64 });\n  const Archive = IDL.Record({ 'canister_id' : IDL.Principal });\n  const Archives = IDL.Record({ 'archives' : IDL.Vec(Archive) });\n  const BlockIndex = IDL.Nat64;\n  const GetBlocksArgs = IDL.Record({\n    'start' : BlockIndex,\n    'length' : IDL.Nat64,\n  });\n  const Memo = IDL.Nat64;\n  const Operation = IDL.Variant({\n    'Burn' : IDL.Record({ 'from' : AccountIdentifier, 'amount' : Tokens }),\n    'Mint' : IDL.Record({ 'to' : AccountIdentifier, 'amount' : Tokens }),\n    'Transfer' : IDL.Record({\n      'to' : AccountIdentifier,\n      'fee' : Tokens,\n      'from' : AccountIdentifier,\n      'amount' : Tokens,\n    }),\n  });\n  const TimeStamp = IDL.Record({ 'timestamp_nanos' : IDL.Nat64 });\n  const Transaction = IDL.Record({\n    'memo' : Memo,\n    'operation' : IDL.Opt(Operation),\n    'created_at_time' : TimeStamp,\n  });\n  const Block = IDL.Record({\n    'transaction' : Transaction,\n    'timestamp' : TimeStamp,\n    'parent_hash' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n  });\n  const BlockRange = IDL.Record({ 'blocks' : IDL.Vec(Block) });\n  const QueryArchiveError = IDL.Variant({\n    'BadFirstBlockIndex' : IDL.Record({\n      'requested_index' : BlockIndex,\n      'first_valid_index' : BlockIndex,\n    }),\n    'Other' : IDL.Record({\n      'error_message' : IDL.Text,\n      'error_code' : IDL.Nat64,\n    }),\n  });\n  const QueryArchiveResult = IDL.Variant({\n    'Ok' : BlockRange,\n    'Err' : QueryArchiveError,\n  });\n  const QueryArchiveFn = IDL.Func(\n      [GetBlocksArgs],\n      [QueryArchiveResult],\n      ['query'],\n    );\n  const QueryBlocksResponse = IDL.Record({\n    'certificate' : IDL.Opt(IDL.Vec(IDL.Nat8)),\n    'blocks' : IDL.Vec(Block),\n    'chain_length' : IDL.Nat64,\n    'first_block_index' : BlockIndex,\n    'archived_blocks' : IDL.Vec(\n      IDL.Record({\n        'callback' : QueryArchiveFn,\n        'start' : BlockIndex,\n        'length' : IDL.Nat64,\n      })\n    ),\n  });\n  const SubAccount = IDL.Vec(IDL.Nat8);\n  const TransferArgs = IDL.Record({\n    'to' : AccountIdentifier,\n    'fee' : Tokens,\n    'memo' : Memo,\n    'from_subaccount' : IDL.Opt(SubAccount),\n    'created_at_time' : IDL.Opt(TimeStamp),\n    'amount' : Tokens,\n  });\n  const TransferError = IDL.Variant({\n    'TxTooOld' : IDL.Record({ 'allowed_window_nanos' : IDL.Nat64 }),\n    'BadFee' : IDL.Record({ 'expected_fee' : Tokens }),\n    'TxDuplicate' : IDL.Record({ 'duplicate_of' : BlockIndex }),\n    'TxCreatedInFuture' : IDL.Null,\n    'InsufficientFunds' : IDL.Record({ 'balance' : Tokens }),\n  });\n  const TransferResult = IDL.Variant({\n    'Ok' : BlockIndex,\n    'Err' : TransferError,\n  });\n  const TransferFeeArg = IDL.Record({});\n  const TransferFee = IDL.Record({ 'transfer_fee' : Tokens });\n  return IDL.Service({\n    'account_balance' : IDL.Func([AccountBalanceArgs], [Tokens], ['query']),\n    'archives' : IDL.Func([], [Archives], ['query']),\n    'decimals' : IDL.Func(\n        [],\n        [IDL.Record({ 'decimals' : IDL.Nat32 })],\n        ['query'],\n      ),\n    'name' : IDL.Func([], [IDL.Record({ 'name' : IDL.Text })], ['query']),\n    'query_blocks' : IDL.Func(\n        [GetBlocksArgs],\n        [QueryBlocksResponse],\n        ['query'],\n      ),\n    'symbol' : IDL.Func([], [IDL.Record({ 'symbol' : IDL.Text })], ['query']),\n    'transfer' : IDL.Func([TransferArgs], [TransferResult], []),\n    'transfer_fee' : IDL.Func([TransferFeeArg], [TransferFee], ['query']),\n  });\n};\nexport const init = ({ IDL }) => { return []; };\n", "import { Actor, Agent } from \"@dfinity/agent\";\nimport { Principal } from \"@dfinity/principal\";\nimport { idlFactory as certifiedIdlFactory } from \"../candid/ledger.certified.idl\";\nimport { idlFactory, LedgerService } from \"../candid/ledger.idl\";\nimport {\n  AccountBalanceRequest,\n  BlockHeight as PbBlockHeight,\n  ICPTs,\n  Memo,\n  Payment,\n  SendRequest,\n} from \"../proto/ledger_pb\";\nimport { AccountIdentifier } from \"./account_identifier\";\nimport {\n  subAccountNumbersToSubaccount,\n  toICPTs,\n  toTransferRawRequest,\n} from \"./canisters/ledger/ledger.request.converts\";\nimport { MAINNET_LEDGER_CANISTER_ID } from \"./constants/canister_ids\";\nimport { TRANSACTION_FEE } from \"./constants/constants\";\nimport {\n  mapTransferError,\n  mapTransferProtoError,\n} from \"./errors/ledger.errors\";\nimport { ICP } from \"./icp\";\nimport { BlockHeight } from \"./types/common\";\nimport { LedgerCanisterCall, LedgerCanisterOptions } from \"./types/ledger\";\nimport { TransferRequest } from \"./types/ledger_converters\";\nimport { defaultAgent } from \"./utils/agent.utils\";\nimport { queryCall, updateCall } from \"./utils/proto.utils\";\n\nexport class LedgerCanister {\n  private constructor(\n    private readonly agent: Agent,\n    private readonly canisterId: Principal,\n    private readonly service: LedgerService,\n    private readonly certifiedService: LedgerService,\n    private readonly updateFetcher: LedgerCanisterCall,\n    private readonly queryFetcher: LedgerCanisterCall,\n    private readonly hardwareWallet: boolean = false\n  ) {}\n\n  public static create(options: LedgerCanisterOptions = {}) {\n    const agent = options.agent ?? defaultAgent();\n    const canisterId = options.canisterId ?? MAINNET_LEDGER_CANISTER_ID;\n\n    const service =\n      options.serviceOverride ??\n      Actor.createActor<LedgerService>(idlFactory, {\n        agent,\n        canisterId,\n      });\n\n    const certifiedService =\n      options.certifiedServiceOverride ??\n      Actor.createActor<LedgerService>(certifiedIdlFactory, {\n        agent,\n        canisterId,\n      });\n    return new LedgerCanister(\n      agent,\n      canisterId,\n      service,\n      certifiedService,\n      options.updateCallOverride ?? updateCall,\n      options.queryCallOverride ?? queryCall,\n      options.hardwareWallet\n    );\n  }\n\n  /**\n   * Returns the balance of the specified account identifier.\n   *\n   * If `certified` is true, the request is fetched as an update call, otherwise\n   * it is fetched using a query call.\n   *\n   * @throws {@link Error}\n   */\n  public accountBalance = async ({\n    accountIdentifier,\n    certified = true,\n  }: {\n    accountIdentifier: AccountIdentifier;\n    certified?: boolean;\n  }): Promise<ICP> => {\n    if (this.hardwareWallet) {\n      return this.accountBalanceHardwareWallet({\n        accountIdentifier,\n        certified,\n      });\n    }\n    const service = certified ? this.certifiedService : this.service;\n    const tokens = await service.account_balance({\n      account: accountIdentifier.toNumbers(),\n    });\n    return ICP.fromE8s(tokens.e8s);\n  };\n\n  /**\n   * Returns the transaction fee of the ledger canister\n   * @returns {BigInt}\n   */\n  public transactionFee = async () => {\n    const {\n      transfer_fee: { e8s },\n    } = await this.service.transfer_fee({});\n    return e8s;\n  };\n\n  /**\n   * Transfer ICP from the caller to the destination `accountIdentifier`.\n   * Returns the index of the block containing the tx if it was successful.\n   *\n   * @throws {@link TransferError}\n   */\n  public transfer = async (request: TransferRequest): Promise<BlockHeight> => {\n    if (this.hardwareWallet) {\n      return this.transferHardwareWallet(request);\n    }\n    // When candid is implemented, the previous lines will go away.\n    // But the transaction fee method is not supported by Ledger App yet.\n    if (request.fee === undefined) {\n      request.fee = this.hardwareWallet\n        ? TRANSACTION_FEE\n        : await this.transactionFee();\n    }\n    const rawRequest = toTransferRawRequest(request);\n    const response = await this.certifiedService.transfer(rawRequest);\n    if (\"Err\" in response) {\n      throw mapTransferError(response.Err);\n    }\n    return response.Ok;\n  };\n\n  private accountBalanceHardwareWallet = async ({\n    accountIdentifier,\n    certified = true,\n  }: {\n    accountIdentifier: AccountIdentifier;\n    certified?: boolean;\n  }): Promise<ICP> => {\n    const callMethod = certified ? this.updateFetcher : this.queryFetcher;\n\n    const request = new AccountBalanceRequest();\n    request.setAccount(accountIdentifier.toProto());\n\n    const responseBytes = await callMethod({\n      agent: this.agent,\n      canisterId: this.canisterId,\n      methodName: \"account_balance_pb\",\n      arg: request.serializeBinary(),\n    });\n\n    return ICP.fromE8s(\n      BigInt(ICPTs.deserializeBinary(new Uint8Array(responseBytes)).getE8s())\n    );\n  };\n\n  private transferHardwareWallet = async ({\n    to,\n    amount,\n    memo,\n    fee,\n    fromSubAccount,\n  }: TransferRequest): Promise<BlockHeight> => {\n    const request = new SendRequest();\n    request.setTo(to.toProto());\n\n    const payment = new Payment();\n    payment.setReceiverGets(amount.toProto());\n    request.setPayment(payment);\n\n    request.setMaxFee(toICPTs(fee ?? TRANSACTION_FEE));\n\n    // Always explicitly set the memo for compatibility with ledger wallet - hardware wallet\n    const requestMemo: Memo = new Memo();\n    requestMemo.setMemo((memo ?? BigInt(0)).toString());\n    request.setMemo(requestMemo);\n\n    if (fromSubAccount !== undefined) {\n      request.setFromSubaccount(subAccountNumbersToSubaccount(fromSubAccount));\n    }\n\n    try {\n      const responseBytes = await this.updateFetcher({\n        agent: this.agent,\n        canisterId: this.canisterId,\n        methodName: \"send_pb\",\n        arg: request.serializeBinary(),\n      });\n\n      // Successful tx. Return the block height.\n      return BigInt(PbBlockHeight.deserializeBinary(responseBytes).getHeight());\n    } catch (err) {\n      if (err instanceof Error) {\n        throw mapTransferProtoError(err);\n      }\n\n      throw err;\n    }\n  };\n}\n", "import {\n  Tokens,\n  TransferArgs as TransferRawRequest,\n} from \"../../../candid/ledgerTypes\";\nimport { ICPTs, Subaccount } from \"../../../proto/ledger_pb\";\nimport { TRANSACTION_FEE } from \"../../constants/constants\";\nimport { TransferRequest } from \"../../types/ledger_converters\";\n\nexport const subAccountNumbersToSubaccount = (\n  subAccountNumbers: number[]\n): Subaccount => {\n  const bytes = new Uint8Array(subAccountNumbers).buffer;\n  const subaccount: Subaccount = new Subaccount();\n  subaccount.setSubAccount(new Uint8Array(bytes));\n  return subaccount;\n};\n\nexport const toICPTs = (amount: bigint): ICPTs => {\n  const result = new ICPTs();\n  result.setE8s(amount.toString(10));\n  return result;\n};\n\nconst e8sToTokens = (e8s: bigint): Tokens => ({ e8s });\n\nexport const toTransferRawRequest = ({\n  to,\n  amount,\n  memo,\n  fee,\n  fromSubAccount,\n}: TransferRequest): TransferRawRequest => ({\n  to: to.toNumbers(),\n  fee: e8sToTokens(fee ?? TRANSACTION_FEE),\n  amount: e8sToTokens(amount.toE8s()),\n  // Always explicitly set the memo for compatibility with ledger wallet - hardware wallet\n  memo: memo ?? BigInt(0),\n  created_at_time: [],\n  from_subaccount: fromSubAccount === undefined ? [] : [fromSubAccount],\n});\n", "import { TransferError as RawTransferError } from \"../../candid/ledgerTypes\";\nimport { ICP } from \"../icp\";\nimport { BlockHeight } from \"../types/common\";\n\nexport class TransferError extends Error {}\n\nexport class InvalidSenderError extends TransferError {}\n\nexport class InsufficientFundsError extends TransferError {\n  constructor(public readonly balance: ICP) {\n    super();\n  }\n}\n\nexport class TxTooOldError extends TransferError {\n  constructor(public readonly allowed_window_secs: number) {\n    super();\n  }\n}\n\nexport class TxCreatedInFutureError extends TransferError {}\n\nexport class TxDuplicateError extends TransferError {\n  constructor(public readonly duplicateOf: BlockHeight) {\n    super();\n  }\n}\n\nexport class BadFeeError extends TransferError {\n  constructor(public readonly expectedFee: bigint) {\n    super();\n  }\n}\n\nexport const mapTransferError = (\n  rawTransferError: RawTransferError\n): TransferError => {\n  if (\"TxDuplicate\" in rawTransferError) {\n    return new TxDuplicateError(rawTransferError.TxDuplicate.duplicate_of);\n  }\n  if (\"InsufficientFunds\" in rawTransferError) {\n    const icp = ICP.fromE8s(rawTransferError.InsufficientFunds.balance.e8s);\n    return new InsufficientFundsError(icp);\n  }\n  if (\"TxCreatedInFuture\" in rawTransferError) {\n    return new TxCreatedInFutureError();\n  }\n  if (\"TxTooOld\" in rawTransferError) {\n    return new TxTooOldError(\n      Number(rawTransferError.TxTooOld.allowed_window_nanos)\n    );\n  }\n  if (\"BadFee\" in rawTransferError) {\n    return new BadFeeError(rawTransferError.BadFee.expected_fee.e8s);\n  }\n  // Edge case\n  return new TransferError(\n    `Unknown error type ${JSON.stringify(rawTransferError)}`\n  );\n};\n\nexport const mapTransferProtoError = (responseBytes: Error): TransferError => {\n  const { message } = responseBytes;\n\n  if (message.includes(\"Reject code: 5\")) {\n    // Match against the different error types.\n    // This string matching is fragile. It's a stop-gap solution until\n    // we migrate to the candid interface.\n\n    if (message.match(/Sending from (.*) is not allowed/)) {\n      return new InvalidSenderError();\n    }\n\n    {\n      const m = message.match(/transaction.*duplicate.* in block (\\d+)/);\n      if (m && m.length > 1) {\n        return new TxDuplicateError(BigInt(m[1]));\n      }\n    }\n\n    {\n      const m = message.match(\n        /debit account.*, current balance: (\\d*(\\.\\d*)?)/\n      );\n      if (m && m.length > 1) {\n        const balance = ICP.fromString(m[1]);\n        if (balance instanceof ICP) {\n          return new InsufficientFundsError(balance);\n        }\n      }\n    }\n\n    if (message.includes(\"is in future\")) {\n      return new TxCreatedInFutureError();\n    }\n\n    {\n      const m = message.match(/older than (\\d+)/);\n      if (m && m.length > 1) {\n        return new TxTooOldError(Number.parseInt(m[1]));\n      }\n    }\n  }\n\n  // Unknown error. Throw as-is.\n  throw responseBytes;\n};\n"],
  "mappings": "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",
  "names": []
}

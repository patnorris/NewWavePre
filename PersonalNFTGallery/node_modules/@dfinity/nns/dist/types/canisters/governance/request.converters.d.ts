import { Principal } from "@dfinity/principal";
import { Command as RawCommand, ListNeurons as RawListNeurons, ListProposalInfo, ManageNeuron as RawManageNeuron, Operation as RawOperation } from "../../../candid/governanceTypes.d";
import { E8s, NeuronId } from "../../types/common";
import { ClaimNeuronRequest, ClaimOrRefreshNeuronRequest, DisburseToNeuronRequest, FollowRequest, ListProposalsRequest, MakeProposalRequest, ManageNeuron, ProposalId, Vote } from "../../types/governance_converters";
export declare const fromListNeurons: (neuronIds?: bigint[] | undefined) => RawListNeurons;
export declare const fromManageNeuron: ({ id, command, neuronIdOrSubaccount, }: ManageNeuron) => RawManageNeuron;
export declare const fromClaimNeuronRequest: ({ publicKey, nonce, dissolveDelayInSecs, }: ClaimNeuronRequest) => [Array<number>, bigint, bigint];
export declare const fromListProposalsRequest: ({ includeRewardStatus, beforeProposal, excludeTopic, includeStatus, limit, }: ListProposalsRequest) => ListProposalInfo;
export declare const fromClaimOrRefreshNeuronRequest: (request: ClaimOrRefreshNeuronRequest) => RawManageNeuron;
export declare const toClaimOrRefreshRequest: ({ memo, controller, }: {
    memo: bigint;
    controller?: Principal | undefined;
}) => RawManageNeuron;
export declare const toSplitRawRequest: ({ neuronId, amount, }: {
    neuronId: NeuronId;
    amount: E8s;
}) => RawManageNeuron;
export declare const fromDisburseToNeuronRequest: (request: DisburseToNeuronRequest) => RawManageNeuron;
export declare const fromMakeProposalRequest: (request: MakeProposalRequest) => RawManageNeuron;
export declare const toRegisterVoteRequest: ({ neuronId, vote, proposalId, }: {
    neuronId: NeuronId;
    vote: Vote;
    proposalId: ProposalId;
}) => RawManageNeuron;
export declare const toMakeProposalRawRequest: (request: MakeProposalRequest) => RawManageNeuron;
export declare const toManageNeuronsFollowRequest: ({ neuronId, topic, followees, }: FollowRequest) => RawManageNeuron;
export declare const toDisburseNeuronRequest: ({ neuronId, toAccountId, amount, }: {
    neuronId: NeuronId;
    toAccountId?: string | undefined;
    amount?: bigint | undefined;
}) => RawManageNeuron;
export declare const toMergeMaturityRequest: ({ neuronId, percentageToMerge, }: {
    neuronId: NeuronId;
    percentageToMerge: number;
}) => RawManageNeuron;
export declare const toSpawnNeuronRequest: ({ neuronId, percentageToSpawn, newController, nonce, }: {
    neuronId: NeuronId;
    percentageToSpawn?: number | undefined;
    newController?: Principal | undefined;
    nonce?: bigint | undefined;
}) => RawManageNeuron;
export declare const toAddHotkeyRequest: ({ neuronId, principal, }: {
    neuronId: NeuronId;
    principal: Principal;
}) => RawManageNeuron;
export declare const toRemoveHotkeyRequest: ({ neuronId, principal, }: {
    neuronId: NeuronId;
    principal: Principal;
}) => RawManageNeuron;
export declare const toIncreaseDissolveDelayRequest: ({ neuronId, additionalDissolveDelaySeconds, }: {
    neuronId: NeuronId;
    additionalDissolveDelaySeconds: number;
}) => RawManageNeuron;
export declare const toJoinCommunityFundRequest: (neuronId: NeuronId) => RawManageNeuron;
export declare const toMergeRequest: ({ sourceNeuronId, targetNeuronId, }: {
    sourceNeuronId: NeuronId;
    targetNeuronId: NeuronId;
}) => RawManageNeuron;
export declare const toStartDissolvingRequest: (neuronId: NeuronId) => RawManageNeuron;
export declare const toStopDissolvingRequest: (neuronId: NeuronId) => RawManageNeuron;
export declare const toCommand: ({ neuronId, command, }: {
    neuronId: NeuronId;
    command: RawCommand;
}) => RawManageNeuron;
export declare const toConfigureOperation: ({ neuronId, operation, }: {
    neuronId: NeuronId;
    operation: RawOperation;
}) => RawManageNeuron;
